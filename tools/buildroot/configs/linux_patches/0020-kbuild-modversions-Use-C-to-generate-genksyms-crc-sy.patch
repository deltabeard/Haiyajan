From 2cbe21afa83dcf1882d3a43d5907193542e2cc2a Mon Sep 17 00:00:00 2001
From: Andi Kleen <ak@linux.intel.com>
Date: Tue, 30 Jun 2020 23:28:52 -0700
Subject: [PATCH 20/38] kbuild, modversions: Use C to generate genksyms crc
 symbols

The CRC symbols for genksym are currently generated by a combination of
inline assembler and a special linker script generated by genksyms,
and incremential linking for each exporting object.

In general we've been trying to minimize incremential linking. It can
be somewhat slow for large modules. Also it doesn't work with Link
Time Optimization in this case.

This patch cleans this all up by letting genksyms generate direct
C code for the CRC symbols, which then can be compiled directly
and linked in.

We generate a .ver.c file for each source file that exports symbols.

There are three cases how the objects can be used:

- ar'ed builtin. In this case we just cat the .ver.c files together,
build the object and include it in the archive.

- multi obj-m. These are linked together and also cat the .ver.c files
together and link them in.

- single file module. This case is a bit trickier. We generate a .ver.o
with the CRC symbols and rely on modpost to read that automatically
for the symbol checking. Then the .ver.o is linked in when the
final module is linked.

This all allows removing the inline assembler for generating the
CRC symbols, which is replaced by the generated CRC files.

Note the .ver.c files are currently implicit and not tracked through
dependencies.

The patch ends up being a net zero, as many deletions, as additions:

 6 files changed, 59 insertions(+), 59 deletions(-)

Signed-off-by: Andi Kleen <ak@linux.intel.com>
---
 include/asm-generic/export.h | 11 --------
 include/linux/export.h       | 23 +---------------
 scripts/Makefile.build       | 52 +++++++++++++++++++-----------------
 scripts/Makefile.crc         | 24 +++++++++++++++++
 scripts/Makefile.lib         |  3 ++-
 scripts/Makefile.modfinal    |  5 +++-
 6 files changed, 59 insertions(+), 59 deletions(-)
 create mode 100644 scripts/Makefile.crc

diff --git a/include/asm-generic/export.h b/include/asm-generic/export.h
index 365345f9a9e3..7192c7599305 100644
--- a/include/asm-generic/export.h
+++ b/include/asm-generic/export.h
@@ -43,17 +43,6 @@ __ksymtab_\name:
 __kstrtab_\name:
 	.asciz "\name"
 	.previous
-#ifdef CONFIG_MODVERSIONS
-	.section ___kcrctab\sec+\name,"a"
-	.balign KCRC_ALIGN
-#if defined(CONFIG_MODULE_REL_CRCS)
-	.long __crc_\name - .
-#else
-	.long __crc_\name
-#endif
-	.weak __crc_\name
-	.previous
-#endif
 #endif
 .endm
 
diff --git a/include/linux/export.h b/include/linux/export.h
index 11a1505904a2..1f53c280174f 100644
--- a/include/linux/export.h
+++ b/include/linux/export.h
@@ -19,26 +19,6 @@ extern struct module __this_module;
 #define THIS_MODULE ((struct module *)0)
 #endif
 
-#ifdef CONFIG_MODVERSIONS
-/* Mark the CRC weak since genksyms apparently decides not to
- * generate a checksums for some symbols */
-#if defined(CONFIG_MODULE_REL_CRCS)
-#define __CRC_SYMBOL(sym, sec)						\
-	asm("	.section \"___kcrctab" sec "+" #sym "\", \"a\"	\n"	\
-	    "	.weak	__crc_" #sym "				\n"	\
-	    "	.long	__crc_" #sym " - .			\n"	\
-	    "	.previous					\n")
-#else
-#define __CRC_SYMBOL(sym, sec)						\
-	asm("	.section \"___kcrctab" sec "+" #sym "\", \"a\"	\n"	\
-	    "	.weak	__crc_" #sym "				\n"	\
-	    "	.long	__crc_" #sym "				\n"	\
-	    "	.previous					\n")
-#endif
-#else
-#define __CRC_SYMBOL(sym, sec)
-#endif
-
 #ifdef CONFIG_HAVE_ARCH_PREL32_RELOCATIONS
 #include <linux/compiler.h>
 /*
@@ -78,7 +58,7 @@ struct kernel_symbol {
 
 #ifdef __GENKSYMS__
 
-#define ___EXPORT_SYMBOL(sym, sec, ns)	__GENKSYMS_EXPORT_SYMBOL(sym)
+#define ___EXPORT_SYMBOL(sym, sec, ns)	__GENKSYMS_EXPORT_SYMBOL(sec, sym)
 
 #else
 
@@ -98,7 +78,6 @@ struct kernel_symbol {
 	extern typeof(sym) sym;							\
 	extern const char __visible __kstrtab_##sym[];				\
 	extern const char __visible __kstrtabns_##sym[];			\
-	__CRC_SYMBOL(sym, sec);							\
 	asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n"	\
 	    "   .globl __kstrtab_" #sym	"				\n"	\
 	    "__kstrtab_" #sym ":					\n"	\
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index 3a4d88c73c43..9ef096afd050 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -38,6 +38,8 @@ subdir-ccflags-y :=
 
 include scripts/Kbuild.include
 
+include scripts/Makefile.crc
+
 # The filename Kbuild has precedence over Makefile
 kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
 kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
@@ -122,7 +124,7 @@ $(obj)/%.i: $(src)/%.c FORCE
 # These mirror gensymtypes_S and co below, keep them in synch.
 cmd_gensymtypes_c =                                                         \
     $(CPP) -D__GENKSYMS__ $(c_flags) $< |                                   \
-    scripts/genksyms/genksyms $(if $(1), -T $(2))                           \
+    scripts/genksyms/genksyms -c $(if $(1), -T $(2))                        \
      $(patsubst y,-R,$(CONFIG_MODULE_REL_CRCS))                             \
      $(if $(KBUILD_PRESERVE),-p)                                            \
      -r $(firstword $(wildcard $(2:.symtypes=.symref) /dev/null))
@@ -154,24 +156,25 @@ ifdef CONFIG_MODVERSIONS
 # When module versioning is enabled the following steps are executed:
 # o compile a <file>.o from <file>.c
 # o if <file>.o doesn't contain a __ksymtab version, i.e. does
-#   not export symbols, it's done.
+#   not export symbols, we generate an empty <file>.ver.c and
+#   we are done.
 # o otherwise, we calculate symbol versions using the good old
-#   genksyms on the preprocessed source and postprocess them in a way
-#   that they are usable as a linker script
-# o generate .tmp_<file>.o from <file>.o using the linker to
-#   replace the unresolved symbols __crc_exported_symbol with
-#   the actual value of the checksum generated by genksyms
-# o remove .tmp_<file>.o to <file>.o
+#   genksyms on the preprocessed source and generate C to
+#   a <file>.ver.c file. The C file contains symbols with the
+#   the CRC value for a symbol.
+# o later the .ver.c files are concatenated and linked with the
+#   the kernel or module.
+# o We also generate a .ver.o, but that is only used by modpost
+#   in case this was a single file module.
 
 cmd_modversions_c =								\
 	if $(OBJDUMP) -h $@ | grep -q __ksymtab; then				\
 		$(call cmd_gensymtypes_c,$(KBUILD_SYMTYPES),$(@:.o=.symtypes))	\
-		    > $(@D)/.tmp_$(@F:.o=.ver);					\
-										\
-		$(LDFINAL) $(KBUILD_LDFLAGS) -r -o $(@D)/.tmp_$(@F) $@		\
-			-T $(@D)/.tmp_$(@F:.o=.ver);				\
-		mv -f $(@D)/.tmp_$(@F) $@;					\
-		rm -f $(@D)/.tmp_$(@F:.o=.ver);					\
+		    > $(@D)/$(@F:.o=.ver.c);					\
+		    $(if $(single-file-module),					\
+			$(CC) -c -o $(@D)/$(@F:.o=.ver.o) $(@D)/$(@F:.o=.ver.c);) \
+	else									\
+		echo > $(@D)/$(@F:.o=.ver.c);					\
 	fi
 endif
 
@@ -318,7 +321,7 @@ cmd_gensymtypes_S =                                                         \
      grep "\<___EXPORT_SYMBOL\>" |                                          \
      sed 's/.*___EXPORT_SYMBOL[[:space:]]*\([a-zA-Z0-9_]*\)[[:space:]]*,.*/EXPORT_SYMBOL(\1);/' ; } | \
     $(CPP) -D__GENKSYMS__ $(c_flags) -xc - |                                \
-    scripts/genksyms/genksyms $(if $(1), -T $(2))                           \
+    scripts/genksyms/genksyms -c $(if $(1), -T $(2))                        \
      $(patsubst y,-R,$(CONFIG_MODULE_REL_CRCS))                             \
      $(if $(KBUILD_PRESERVE),-p)                                            \
      -r $(firstword $(wildcard $(2:.symtypes=.symref) /dev/null))
@@ -349,12 +352,9 @@ ifdef CONFIG_ASM_MODVERSIONS
 cmd_modversions_S =								\
 	if $(OBJDUMP) -h $@ | grep -q __ksymtab; then				\
 		$(call cmd_gensymtypes_S,$(KBUILD_SYMTYPES),$(@:.o=.symtypes))	\
-		    > $(@D)/.tmp_$(@F:.o=.ver);					\
-										\
-		$(LDFINAL) $(KBUILD_LDFLAGS) -r $(KBUILD_MOD_LDFLAGS) -o $(@D)/.tmp_$(@F) $@	\
-			-T $(@D)/.tmp_$(@F:.o=.ver);				\
-		mv -f $(@D)/.tmp_$(@F) $@;					\
-		rm -f $(@D)/.tmp_$(@F:.o=.ver);					\
+		    > $(@D)/$(@F:.o=.ver.c);					\
+	else									\
+		echo > $(@D)/$(@F:.o=.ver.c);					\
 	fi
 endif
 
@@ -395,7 +395,9 @@ $(subdir-modorder): $(obj)/%/modules.order: $(obj)/% ;
 #
 
 quiet_cmd_ar_builtin = AR      $@
-      cmd_ar_builtin = rm -f $@; $(AR) cDPrST $@ $(real-prereqs)
+      cmd_ar_builtin = $(call merge_ksyms,.a,$(real-prereqs)); \
+		       rm -f $@; \
+		       $(AR) cDPrST $@ $(real-prereqs) $$TO
 
 $(obj)/built-in.a: $(real-obj-y) FORCE
 	$(call if_changed,ar_builtin)
@@ -426,8 +428,10 @@ $(obj)/lib.a: $(lib-y) FORCE
 # module is turned into a multi object module, $^ will contain header file
 # dependencies recorded in the .*.cmd file.
 quiet_cmd_link_multi-m = LDFINAL [M]  $@
-      cmd_link_multi-m = $(LDFINAL) $(ld_flags) -r $(KBUILD_MOD_LDFLAGS) \
-				-o $@ $(filter %.o,$^)
+	cmd_link_multi-m = $(call merge_ksyms,.o,$(filter %.o,$^)); \
+		$(LDFINAL) $(ld_flags) -r $(KBUILD_MOD_LDFLAGS) \
+				-o $@ $(filter %.o,$^) $$TO; \
+		$(call update-ksyms,$@)
 
 $(multi-used-m): FORCE
 	$(call if_changed,link_multi-m)
diff --git a/scripts/Makefile.crc b/scripts/Makefile.crc
new file mode 100644
index 000000000000..1912dd5b7918
--- /dev/null
+++ b/scripts/Makefile.crc
@@ -0,0 +1,24 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# include after auto.conf
+
+ifdef CONFIG_MODVERSIONS
+# collect all the CRCs for kernel symbols in a single vermerged.o
+# $1: postfix of target
+# $2: input files
+# produces merged object in $$TO shell variable in same recipe
+merge_ksyms = \
+	TC=$(@D)/.tmp_$(@F:$(1)=_vermerged.c); \
+	TO=$(@D)/.tmp_$(@F:$(1)=_vermerged.o); \
+	cat $(patsubst %.o,%.ver.c,$(filter %.o,$(2))) /dev/null > $$TC; \
+	$(CC) -c -o $$TO $$TC; \
+        rm -f $$TC
+
+# after immediate linking generate a dummy .ver.c for the next step
+# it's not needed anymore becauses the CRCs are already linked in
+# $1: target
+update-ksyms = echo > $(1:.o=.ver.c)
+else
+merge_ksyms = true
+update-ksyms = true
+endif
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index e383bb7c6fcd..52e49602ba2b 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -247,7 +247,8 @@ quiet_cmd_ld = LD      $@
 # ---------------------------------------------------------------------------
 
 quiet_cmd_ar = AR      $@
-      cmd_ar = rm -f $@; $(AR) cDPrsT $@ $(real-prereqs)
+      cmd_ar = $(call merge_ksyms,.a,$(real-prereqs)); \
+               rm -f $@; $(AR) cDPrsT $@ $(real-prereqs) $$TO
 
 # Objcopy
 # ---------------------------------------------------------------------------
diff --git a/scripts/Makefile.modfinal b/scripts/Makefile.modfinal
index d998f3e8daa5..b7bba83ee91b 100644
--- a/scripts/Makefile.modfinal
+++ b/scripts/Makefile.modfinal
@@ -6,7 +6,9 @@
 PHONY := __modfinal
 __modfinal:
 
+include include/config/auto.conf
 include $(srctree)/scripts/Kbuild.include
+include $(srctree)/scripts/Makefile.crc
 
 # for c_flags
 include $(srctree)/scripts/Makefile.lib
@@ -31,10 +33,11 @@ ARCH_POSTLINK := $(wildcard $(srctree)/arch/$(SRCARCH)/Makefile.postlink)
 
 quiet_cmd_ld_ko_o = LDFINAL [M]  $@
       cmd_ld_ko_o =                                                     \
+	$(call merge_ksyms,.ko,$(filter-out %.mod.o,$(filter %.o,$^)));	\
 	$(LDFINAL) -r $(KBUILD_MOD_LDFLAGS) $(KBUILD_LDFLAGS)		\
 		$(KBUILD_LDFLAGS_MODULE) $(LDFLAGS_MODULE)		\
 		$(addprefix -T , $(KBUILD_LDS_MODULE))			\
-		-o $@ $(filter %.o, $^);				\
+		-o $@ $(filter %.o, $^) $$TO;				\
 	$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)
 
 $(modules): %.ko: %.o %.mod.o $(KBUILD_LDS_MODULE) FORCE
-- 
2.28.0

